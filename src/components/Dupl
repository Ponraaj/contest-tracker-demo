'use client';
import React, { useState, useEffect } from 'react';
import Filter from './Filter';
import Pagination from './Pagination';
import { Student, Filters } from '@/lib/types';
import dynamic from 'next/dynamic';
import Link from 'next/link';
import { ThreeDots } from 'react-loader-spinner';
import { createClient } from '@/lib/supabase/client';

const LineChart = dynamic(() => import('./Chart'), { ssr: false });
const DoughnutChart = dynamic(() => import('./CountChart'), { ssr: false });

interface TableProps {
  initialContests: string[];
  initialStudents: Student[];
  initialContest: string;
}


export default function Table({ initialContests, initialStudents, initialContest }: TableProps) {
  // ... (existing state definitions)

  const [filterOptions, setFilterOptions] = useState({
    no_of_questions: [],
    status: [],
    dept: [],
    section: [],
    year: [],
    college: []
  });

  const fetchFilterOptions = async (contestName: string) => {
    const supabase = createClient();
    try {
      const { data, error } = await supabase
        .from(contestName)
        .select('no_of_questions, status, dept, section, year, college');

      if (error) throw error;

      if (data) {
        const options = {
          no_of_questions: [...new Set(data.map(item => item.no_of_questions))],
          status: [...new Set(data.map(item => item.status))],
          dept: [...new Set(data.map(item => item.dept))],
          section: [...new Set(data.map(item => item.section))],
          year: [...new Set(data.map(item => item.year))],
          college: [...new Set(data.map(item => item.college))]
        };

        setFilterOptions(options);
      }
    } catch (error) {
      console.error('Error fetching filter options:', error.message);
      setError('Failed to fetch filter options');
    }
  };

  const handleContestChange = async (event: React.ChangeEvent<HTMLSelectElement>) => {
    const newContest = event.target.value;
    setSelectedContest(newContest);
    setLoading(true);
    try {
      const supabase = createClient();
      const { data, error } = await supabase
        .from(newContest)
        .select('leetcode_id,username, no_of_questions, question_ids, finish_time, status, dept, year, section, rank, college');

      if (error) throw error;

      setStudents(data || []);
      setFilteredStudents(data || []);
      setCurrentPage(1);

      // Fetch filter options for the new contest
      await fetchFilterOptions(newContest);
    } catch (error) {
      console.error('Error fetching data:', error.message);
      setError('Failed to fetch data');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchFilterOptions(initialContest);
  }, [initialContest]);

  // ... (rest of the component code)

  return (
    <div className="px-10">
      {/* ... (existing JSX) */}
      
      {showFilters && (
        <Filter 
          filters={filters} 
          onFilterChange={handleFilterChange} 
          filterOptions={filterOptions}
        />
      )}

      {/* ... (rest of the JSX) */}
    </div>
  );
}